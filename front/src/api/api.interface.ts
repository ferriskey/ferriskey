import {
  Client,
  CredentialOverview,
  GrantType,
  JwkKey,
  Realm,
  RequiredAction,
  Role,
  User,
} from '@/api/core.interface.ts'

/*
 Generated by typeshare 1.13.2
*/

export interface AuthResponse {
  url: string
}

export interface AuthenticateQueryParams {
  client_id: string
}

export interface AuthenticateRequest {
  username?: string
  password?: string
}

export enum AuthenticationStatus {
  Success = 'Success',
  RequiresActions = 'RequiresActions',
  RequiresOtpChallenge = 'RequiresOtpChallenge',
  Failed = 'Failed',
}

export interface AuthenticateResponse {
  status: AuthenticationStatus
  url?: string
  required_actions?: RequiredAction[]
  token?: string
  message?: string
}

export interface BulkDeleteUserResponse {
  count: number
}

export interface ChallengeOtpRequest {
  code?: string
}

export interface ChallengeOtpResponse {
  url: string
}

export interface ClientsResponse {
  data: Client[]
}

export interface CreateRoleValidator {
  name: string
  description?: string
  permissions: string[]
}

export interface CreateUserResponse {
  data: User
}

export interface DeleteClientResponse {
  message: string
}

export interface DeleteUserCredentialResponse {
  message: string
}

export interface DeleteUserResponse {
  count: number
}

export interface GetCertsResponse {
  keys: JwkKey[]
}

export interface GetClientResponse {
  data: Client
}

export interface GetConfigResponse {
  app_version: string
  environment: string
}

export interface GetOpenIdConfigurationResponse {
  issuer: string
  authorization_endpoint: string
  token_endpoint: string
  introspection_endpoint: string
  userinfo_endpoint: string
  jwks_uri: string
  grant_types_supported: string[]
}

export interface GetRoleResponse {
  data: Role
}

export interface GetRolesResponse {
  data: Role[]
}

export interface GetUserCredentialsResponse {
  data: CredentialOverview[]
}

export interface GetUserRolesResponse {
  data: Role[]
}

export interface OtpVerifyRequest {
  code: string
  label: string
  secret: string
}

export interface SetupOtpResponse {
  secret: string
  otpauth_url: string
  issuer: string
}

export interface TokenRequestValidator {
  grant_type?: GrantType
  client_id?: string
  client_secret?: string
  code?: string
  username?: string
  password?: string
  refresh_token?: string
}

export interface UnassignRoleResponse {
  message: string
}

export interface UpdateRolePermissionsResponse {
  data: Role
}

export interface UpdateRolePermissionsValidator {
  permissions: string[]
}

export interface UpdateRoleResponse {
  data: Role
}

export interface UpdateRoleValidator {
  name?: string
  description?: string
}

export interface UpdateUserResponse {
  data: User
}

export interface UserRealmsResponse {
  data: Realm[]
}

export interface UserResponse {
  data: User
}

export interface UsersResponse {
  data: User[]
}

export interface VerifyOtpResponse {
  message: string
}

export enum AppEnv {
  Development = 'Development',
  Production = 'Production',
}
