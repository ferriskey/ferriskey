//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "realms"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: Uuid,
    pub name: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Name,
    CreatedAt,
    UpdatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    AuthSessions,
    Clients,
    JwtKeys,
    RealmSettings,
    Roles,
    UserSessions,
    Users,
    Webhooks,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::Name => ColumnType::String(StringLen::N(255u32)).def().unique(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::AuthSessions => Entity::has_many(super::auth_sessions::Entity).into(),
            Self::Clients => Entity::has_many(super::clients::Entity).into(),
            Self::JwtKeys => Entity::has_many(super::jwt_keys::Entity).into(),
            Self::RealmSettings => Entity::has_many(super::realm_settings::Entity).into(),
            Self::Roles => Entity::has_many(super::roles::Entity).into(),
            Self::UserSessions => Entity::has_many(super::user_sessions::Entity).into(),
            Self::Users => Entity::has_many(super::users::Entity).into(),
            Self::Webhooks => Entity::has_many(super::webhooks::Entity).into(),
        }
    }
}

impl Related<super::auth_sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuthSessions.def()
    }
}

impl Related<super::clients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clients.def()
    }
}

impl Related<super::jwt_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JwtKeys.def()
    }
}

impl Related<super::realm_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RealmSettings.def()
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Roles.def()
    }
}

impl Related<super::user_sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserSessions.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::webhooks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Webhooks.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
